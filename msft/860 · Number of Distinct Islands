from collections import deque

Direction = [(1, 0), (0, 1), (-1, 0), (0, -1)]

class Solution:
    """
    @param grid: a list of lists of integers
    @return: return an integer, denote the number of distinct islands
    """
    def numberof_distinct_islands(self, grid):
        # write your code here
        rows, cols = len(grid), len(grid[0])
        visited = set()
        path_set = set()
        for row in range(rows):
            for col in range(cols):
                if grid[row][col] and (row, col) not in visited:
                    self.bfs(grid, row, col, visited, path_set)
        return len(path_set)


    def bfs(self, grid, row, col, visited, path_set):
        queue = deque()
        queue.append((row, col))
        path = ''

        while queue:
            curr_row, curr_col = queue.popleft()

            for delta_row, delta_col in Direction:
                next_row = curr_row + delta_row
                next_col = curr_col + delta_col 

                if self.is_valid(grid, next_row, next_col, visited):
                    queue.append((next_row, next_col))
                    visited.add((next_row, next_col))
                    path += str(next_row - row) + str(next_col - col)
        print(path)
        if path not in path_set:
            path_set.add(path)
    
    def is_valid(self, grid, row, col, visited):
        rows, cols = len(grid), len(grid[0])
        if row < 0 or row >= rows:
            return False
        if col < 0 or col >= cols:
            return False
        if (row, col) in visited:
            return False 
        return grid[row][col]

